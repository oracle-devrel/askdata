
DROP TABLE TRUST_LIBRARY;

DROP TABLE MODEL_USAGE;

DROP TABLE APP_USERS;

DROP TABLE EXECUTION_LOG;

DROP TABLE TRAININGDATA_HISTORY;

DROP TABLE FINETUNE_WORKFLOW;

DROP TABLE FINETUNE_EVALUATION;

DROP TABLE FINETUNE_CONFIG;

-- DONT DROP THE SCHEMA_VERSION TABLE
CREATE TABLE schema_version (
    version_number VARCHAR(50) NOT NULL,
    description TEXT,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    applied_by VARCHAR(100),
    script_name VARCHAR(255)
);
INSERT INTO schema_version(version_number, description, applied_by, script_name) 
    VALUES ('2025W21', 'All recent modifications', 'Greg Keys', 'nl2sql_datamodel_schema.sql');

CREATE TABLE TRUST_LIBRARY (
    ID              NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    CERTIFIED_DATE  TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
    PROMPT_TXT      VARCHAR2(4000 BYTE) NOT NULL,
    PROMPT_VECT     VECTOR NOT NULL,  -- VECTOR DATA TYPE FOR EMBEDDING STORAGE
    SQL_TXT         VARCHAR2(4000 BYTE) NOT NULL,
    certify_state_id NUMBER
);

-- Add description for the columns
-- This is a manual entry table. This insert needs to be done from a sql ide.
-- examples below.
CREATE TABLE MODEL_USAGE (
    ID                 NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    MODEL_PURPOSE      VARCHAR2(4000 BYTE) NOT NULL,
    MODEL_SRC          VARCHAR2(100),
    MODEL_NAME         VARCHAR2(200 BYTE)  NOT NULL,
    USAGE_START        TIMESTAMP DEFAULT SYSTIMESTAMP,
    USAGE_STOP         TIMESTAMP, -- null means active
    WORKFLOW_ID        NUMBER,         
    ENDPOINT_OCID      VARCHAR2(1000),
    DAC_CLUSTER_OCID   VARCHAR2(1000), 
    VERSION            VARCHAR2(128)
);

-- version needs to be updated. Needs to include the first 4 columns (except usage stop)
-- TODO: set the start_time to the upload of this schema.
INSERT INTO MODEL_USAGE(MODEL_PURPOSE,MODEL_NAME_VERSION,MODEL_SRC,USAGE_START) VALUES ('GEN-PURPOSE-LLM','meta-llama-3.3-70b','DAC', SYSTIMESTAMP););
INSERT INTO MODEL_USAGE(MODEL_PURPOSE,MODEL_NAME_VERSION,MODEL_SRC,USAGE_START) VALUES ('EMBEDDINGS-MODEL','cohere.embed-english-v3.0','OCI-PUBLIC', SYSTIMESTAMP););
COMMIT;

-- Need description and usage information.
CREATE TABLE APP_USERS (
    ID            NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    EMAIL_ADDRESS VARCHAR2(200 BYTE) NOT NULL
);

CREATE UNIQUE INDEX UNQ_APP_USERS_EMAIL
ON APP_USERS (LOWER(EMAIL_ADDRESS));

INSERT INTO APP_USERS (EMAIL_ADDRESS) values ('anonymous@gmail.com');
COMMIT;

CREATE TABLE EXECUTION_LOG(
    ID                      NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    LLM_ID                  NUMBER,
    EXECUTION_DATE          TIMESTAMP DEFAULT SYSTIMESTAMP,
    USER_ID                 NUMBER NOT NULL,
    TRUST_ID                NUMBER,
    TRUST_SCORE             NUMBER,
    USER_PROMPT             VARCHAR2(4000 BYTE),
    CONVO_PROMPT            VARCHAR2(4000 BYTE),
    CONVO_ID                VARCHAR2(255 BYTE),
    CONVO_SEQ_NUM           NUMBER,
    GENERATED_SQL           VARCHAR2(4000 BYTE),  -- GEN BY LLM
    IS_TRUSTED              NUMBER DEFAULT 0 NOT NULL,
    IS_PROMPT_EQUIV         NUMBER DEFAULT 0 NOT NULL,
    IS_TEMPLATE_EQUIV       NUMBER DEFAULT 0 NOT NULL,
    EXECUTED_SQL            VARCHAR2(4000 BYTE),  -- SENT TO SOURCE DB
    DB_ERROR_CODE           VARCHAR2(255 BYTE),
    DB_ERROR_TXT            VARCHAR2(2000 BYTE),
    IS_AUTHORIZED           NUMBER DEFAULT 0 NOT NULL,
    IS_CLARIFY              NUMBER DEFAULT 0 NOT NULL,
    IS_ACTION               NUMBER DEFAULT 0 NOT NULL,
    ACTION_TYPE             VARCHAR2(255 BYTE),
    USER_FEEDBACK_CODE      NUMBER DEFAULT 0 NOT NULL,
    USER_FEEDBACK_TXT       VARCHAR2(4000 BYTE) DEFAULT 0 NOT NULL,
    IS_CERT_PROCESSED       NUMBER DEFAULT 0 NOT NULL
);

ALTER TABLE EXECUTION_LOG ADD CONSTRAINT FK_EXECUTION_LOG_TRUST_LIBRARY FOREIGN KEY(TRUST_ID) REFERENCES TRUST_LIBRARY(ID);
ALTER TABLE EXECUTION_LOG ADD CONSTRAINT FK_EXECUTION_LOG_USER FOREIGN KEY(USER_ID)  REFERENCES APP_USERS(ID);
ALTER TABLE EXECUTION_LOG ADD CONSTRAINT FK_EXECUTION_LOG_MODEL_USAGE FOREIGN KEY(LLM_ID)  REFERENCES MODEL_USAGE(ID);

CREATE TABLE APP_DEBUG_DATA (
  PARENT_ID  NUMBER,
  DEBUG_DATA VARCHAR2(32000),
  TSTMP TIMESTAMP DEFAULT SYSTIMESTAMP
);

CREATE TABLE CERTIFY_STATE (
    ID NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    PROMPT_PROC_DATE TIMESTAMP DEFAULT SYSTIMESTAMP,
    PROMPT_TXT VARCHAR2(4000 BYTE),
    IS_SQL_PROC NUMBER DEFAULT 0 NOT NULL,
    SQL_PROC_DATE TIMESTAMP,
    SQL_TXT VARCHAR2(4000 BYTE),
    PARSE_ERROR_CODE VARCHAR2(4000 BYTE),
    IS_STAGED_PROC NUMBER DEFAULT 0 NOT NULL,
    STAGED_PROC_DATE TIMESTAMP,
    PASS_FAIL VARCHAR2(255),
    CORRECTED_SQL_TXT VARCHAR2(4000 BYTE),
    IS_CERT_PROC NUMBER DEFAULT 0 NOT NULL,
    CERT_PROC_DATE TIMESTAMP,                                        
    -- metadata around the prompt source
    PROMPT_SOURCE VARCHAR(255 BYTE),                                 -- auto, upload, user
    UPLOAD_FILENAME VARCHAR2(4000 BYTE),
    USER_EXECUTION_ID NUMBER,                                        -- FK to execution_log
    METADATA_1 VARCHAR2(4000 BYTE),
    METADATA_2 VARCHAR2(4000 BYTE)
);

--The referencial integrity is enforced at the application level.
--When a mistake entry in the trust library needs to be removed (occurs when experts certifies incorrectly) 
--then, the entry will be deleted from the trust library and two fields(is_cert_proc=0, cert_proc_date=null) will be updated in certify state
--it will thereby revert to its pre-certification state.
--sblais and gkeys - 14 april 2025
--alter table trust_library add constraint FK_TRUST_LIBRARY_CERTIFY_STATE FOREIGN KEY (certify_state_id) REFERENCES CERTIFY_STATE(ID);

CREATE TABLE FINETUNE_WORKFLOW (
    ID	NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
		
		-- step 1: configure
    WORKFLOW_KEY  VARCHAR(255 BYTE),						-- key for each workflow (completed or aborted), modelname from UI + tstamp appended at submit
    MODEL_USAGE_ID NUMBER,
    TRAINING_DATA_ID  NUMBER,			                    -- FK to training data history
    MODEL_DESCR     VARCHAR2(4000 BYTE),					-- from UI
    UNIT_COUNT     NUMBER,									-- from config
    UNIT_SHAPE     VARCHAR(255 BYTE),						-- from config
    CONFIG_STATE     VARCHAR(255 BYTE),						-- values: 'empty' (default), 'cleared', 'set' based on button clicked ('cleared' starts new workflow_id)
    DEPLOY_STATE     VARCHAR(255 BYTE),
    CONFIG_SUBMIT_TIME	TIMESTAMP DEFAULT SYSTIMESTAMP,		-- when either set or clear button is clicked

		-- step 2: create dac (all from json response when dac creation started)
    DAC_SUBMIT_TIME	TIMESTAMP DEFAULT SYSTIMESTAMP,
    DAC_CREATED_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP,	-- resources reserved and DAC creation starting
    DAC_DESTROY_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP,	-- resources reserved and DAC creation starting
    DAC_LIFECYCLE_STATE     VARCHAR(255 BYTE),				-- creating, etc
    DAC_CLUSTER_ID     VARCHAR(255 BYTE),		
    DAC_ERROR_DTLS     VARCHAR(4000 BYTE),	
    DAC_UNIT_COUNT     NUMBER,
    DAC_UNIT_SHAPE     VARCHAR(255 BYTE),
    DAC_STARTED_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP,	-- dac available for use

 		-- step 3: run finetune   
    FT_SUBMIT_TIME	TIMESTAMP DEFAULT SYSTIMESTAMP,
    FT_CREATED_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP,		-- start finetune
    FT_BASE_MODEL_ID     VARCHAR(255 BYTE),
    FT_LIFECYCLE_STATE     VARCHAR(255 BYTE),
    FT_RESULT_MODEL_ID     VARCHAR(255 BYTE),
    FT_TYPE     VARCHAR(255 BYTE),
    FT_VERSION     VARCHAR(255 BYTE),
    FT_COMPLETION_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP	-- end finetune
    FT_ERROR_DTLS     VARCHAR(4000 BYTE),	
 		
    EVAL_START_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP	
    EVAL_END_TIME     TIMESTAMP DEFAULT SYSTIMESTAMP	

 		
 		-- step 4: deploy
 		-- TBD   

);

CREATE TABLE FINETUNE_EVALUATION (
    ID	NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    FINETUNE_WORKFLOW_ID NOT NULL NUMBER -- FK To FINETUNE_WORKFLOW
    EVAL_CATEGORY        NOT NULL VARCHAR2(255)
    PROMPT_TXT                    VARCHAR2(4000) 
    SQL_TRUST_LIBARY              VARCHAR2(4000) 
    SQL_LLM_GENERATED             VARCHAR2(4000) 
    IS_ACCURATE          NOT NULL NUMBER         
    LLM_START_TIME                TIMESTAMP(6)   
    LLM_END_TIME                  TIMESTAMP(6)  
    )


CREATE TABLE TRAININGDATA_HISTORY (
    ID	NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    RECORD_COUNT          NUMBER
    FILENAME              VARCHAR2(500)  
    SUBMIT_TIME           TIMESTAMP(6)   
    COMMENTS              VARCHAR2(5000) 
    PATH                  VARCHAR2(2000) 
    )

CREATE TABLE FINETUNE_CONFIG (
    ID	NUMBER GENERATED ALWAYS AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 PRIMARY KEY,
    FINETUNE_WORKFLOW_ID	NUMBER, --FK to FINETUNE_WORKFLOW
    EARLY_STOPPING_PATIENCE	NUMBER,
    EARLY_STOPPING_THRESHOLD	NUMBER,
    LEARNING_RATE	NUMBER,
    LOG_MODEL_METRICS_INTERVAL_IN_STEPS	NUMBER,
    LORA_ALPHA	NUMBER,
    LORA_DROPOUT	NUMBER,
    LORA_R	NUMBER,
    TOTAL_TRAINING_EPOCHS	NUMBER,
    TRAINING_BATCH_SIZE	NUMBER,
    TRAINING_CONFIG_TYPE	VARCHAR(255 BYTE)
);

ALTER TABLE FINETUNE_CONFIG ADD CONSTRAINT FK_FINETUNE_CONFIG_FINETUNE_WORKFLOW FOREIGN KEY(FINETUNE_WORKFLOW_ID) REFERENCES FINETUNE_WORKFLOW(ID);