{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show each account payables where date due is 2024      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT * FROM account_payables_tbl a WHERE EXTRACT(YEAR FROM a.due_date) = 2024;;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show the first twenty payables where invoice date is 2024      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT * FROM account_payables_tbl a WHERE EXTRACT(YEAR FROM a.invoice_date) = 2024 ORDER BY a.invoice_date NULLS LAST LIMIT 20;;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show each account payables      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.accounts_payable_id, ap.past_due_days, ap.invoice_number, ap.gl_date, ap.amount_due, ap.due_date, ap.invoice_date, ap.invoice_type_id, ap.vendor_id FROM account_payables_tbl ap;;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show the first twenty payables      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT * FROM account_payables_tbl ap LIMIT 20;;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.AMOUNT_DUE, ap.DUE_DATE, ap.PAST_DUE_DAYS FROM ACCOUNT_PAYABLES_TBL ap WHERE ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due, sorted by most recent invoice date      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.AMOUNT_DUE  FROM      ACCOUNT_PAYABLES_TBL ap  WHERE      ap.AMOUNT_DUE > 0  ORDER BY      ap.INVOICE_DATE DESC;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.AMOUNT_DUE,      ap.DUE_DATE,      ap.PAST_DUE_DAYS FROM      ACCOUNT_PAYABLES_TBL ap WHERE      ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.AMOUNT_DUE,      ap.DUE_DATE,      ap.PAST_DUE_DAYS FROM      ACCOUNT_PAYABLES_TBL ap WHERE      ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due, sorted by most recent invoice date and highest amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.AMOUNT_DUE  FROM      ACCOUNT_PAYABLES_TBL ap  WHERE      ap.AMOUNT_DUE > 0  ORDER BY      ap.INVOICE_DATE DESC,      ap.AMOUNT_DUE DESC fetch first 25 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due, sorted by most recent invoice date and highest amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.AMOUNT_DUE  FROM      ACCOUNT_PAYABLES_TBL ap  WHERE      ap.AMOUNT_DUE > 0  ORDER BY      ap.INVOICE_DATE DESC,      ap.AMOUNT_DUE DESC fetch first 25 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due, sorted by most recent invoice date and highest amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.AMOUNT_DUE  FROM      ACCOUNT_PAYABLES_TBL ap  WHERE      ap.AMOUNT_DUE > 0  ORDER BY      ap.INVOICE_DATE DESC,      ap.AMOUNT_DUE DESC fetch first 25 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: amounts where invoices are due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.AMOUNT_DUE FROM ACCOUNT_PAYABLES_TBL ap WHERE ap.DUE_DATE < SYSDATE;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: amounts where invoices are due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,      ap.AMOUNT_DUE FROM      ACCOUNT_PAYABLES_TBL ap WHERE      ap.DUE_DATE < SYSDATE;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show me more invoices      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,     ap.INVOICE_DATE,     ap.AMOUNT_DUE FROM      ACCOUNT_PAYABLES_TBL ap FETCH FIRST 50 ROWS ONLY;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      ap.INVOICE_NUMBER,     ap.AMOUNT_DUE FROM      ACCOUNT_PAYABLES_TBL ap WHERE      ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Display all invoices that have a balance due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.AMOUNT_DUE, ap.DUE_DATE, ap.PAST_DUE_DAYS FROM ACCOUNT_PAYABLES_TBL ap WHERE ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: how invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT    ap.INVOICE_NUMBER,   ap.AMOUNT_DUE,   ap.DUE_DATE,   ap.PAST_DUE_DAYS FROM    ACCOUNT_PAYABLES_TBL ap WHERE    ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show all invoices for 2020      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT    ap.INVOICE_NUMBER,    ap.INVOICE_DATE,    ap.AMOUNT_DUE FROM    ACCOUNT_PAYABLES_TBL ap WHERE    EXTRACT(YEAR FROM ap.INVOICE_DATE) = 2020;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT    ap.INVOICE_NUMBER,    ap.AMOUNT_DUE,    ap.DUE_DATE,    ap.PAST_DUE_DAYS  FROM    ACCOUNT_PAYABLES_TBL ap  WHERE    ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT    ap.INVOICE_NUMBER,   ap.DUE_DATE,   ap.AMOUNT_DUE,   ap.PAST_DUE_DAYS FROM    ACCOUNT_PAYABLES_TBL ap WHERE    ap.AMOUNT_DUE > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoices with amount due sorted by amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 order by      ap.amount_due;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show my overdue invoices with amounts over 10,000 by vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      v.VENDOR_NAME,      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.DUE_DATE,      ap.AMOUNT_DUE FROM      ACCOUNT_PAYABLES_TBL ap JOIN      VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE      ap.PAST_DUE_DAYS > 0     AND ap.AMOUNT_DUE > 10000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show my all overdue invoices by vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT      v.VENDOR_NAME,      ap.INVOICE_NUMBER,      ap.INVOICE_DATE,      ap.DUE_DATE,      ap.AMOUNT_DUE FROM      ACCOUNT_PAYABLES_TBL ap JOIN      VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE      ap.PAST_DUE_DAYS > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show vendor name and total amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: view invoices that have an overdue amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total of all invoices past due by vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due for 2024      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap where      extract(year from ap.invoice_date) = 2024     and ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total of all invoices over 1 million past due by vendor, sorted in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.amount_due > 1000000     and ap.due_date < sysdate group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list all vendors with past due account payables      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT vendors.vendor_name, account_payables_tbl.past_due_days, account_payables_tbl.amount_due FROM account_payables_tbl JOIN vendors ON account_payables_tbl.vendor_id = vendors.vendor_id WHERE account_payables_tbl.past_due_days > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list all vendors with past due account payables      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT vendors.vendor_name, account_payables_tbl.past_due_days, account_payables_tbl.amount_due FROM account_payables_tbl JOIN vendors ON account_payables_tbl.vendor_id = vendors.vendor_id WHERE account_payables_tbl.past_due_days > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoice amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.amount_due from account payables table ap;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoice amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.amount_due from account payables table ap;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show all vendors      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      v.vendor_site_details from      vendors v;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show open invoices over 1000      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.invoice_number, ap.amount_due, ap.due_date, ap.past_due_days from account_payables_tbl ap where ap.amount_due > 1000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total payables amount by vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_payables_amount from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total amount due aggregated by supplier name      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_outstanding_amount from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding balances      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list vendors with their respective total amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding balances      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with outstanding amounts waiting for payment      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices that have an outstanding amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list vendors with their respective total amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display top 5 invoices by amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap order by      ap.amount_due desc fetch first 5 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due over 10000      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap where      ap.amount_due > 10000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due and vendor name      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      v.vendor_name from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: what are all the vendor names in the database      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      vendor_name from      vendors;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: retrieve invoices with unpaid amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their respective total amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show pending invoices with amount due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Take all invoices past due that are above $1,000,000.  Then total them for each vendor and sort in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate     and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: shows the total amount due by vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices that have not been fully paid      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices with unpaid balances      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.invoice_number, ap.amount_due, ap.due_date, ap.past_due_days from account_payables_tbl ap where ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices that need to be paid      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices with remaining balances      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.invoice_number, ap.amount_due, ap.due_date, ap.past_due_days from account_payables_tbl ap where ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices requiring payment      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display unpaid invoices with outstanding balances      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select ap.invoice_number, ap.amount_due, ap.due_date, ap.past_due_days from account_payables_tbl ap where ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices that have an outstanding balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list vendor name and total amount due for each vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select v.vendor_name, sum(ap.amount_due) as total_amount_due  from account_payables_tbl ap  join vendors v on ap.vendor_id = v.vendor_id  group by v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due above 100000 sorted by amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 100000 order by      ap.amount_due fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display 2023 invoices      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap where      extract(year from ap.invoice_date) = 2023 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total of invoices past due by vendor, over $1 million, in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due  from      account_payables_tbl ap  join      vendors v on ap.vendor_id = v.vendor_id  where      ap.due_date < sysdate      and ap.amount_due > 1000000  group by      v.vendor_name  order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Take all invoices past due that are above $1,000,000.  Then total them for each vendor and sort in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate     and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Take all invoices past due that are above $1,000,000.  Then total them for each vendor and sort in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate     and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_outstanding_amount from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: view invoices with an open or unpaid balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices that have a pending payment balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices where the balance has not been fully paid      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due above 100000 sorted by amount      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 100000 order by      ap.amount_due fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display 2023 invoices      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap where      extract(year from ap.invoice_date) = 2023 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total of invoices past due by vendor, over $1 million, in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due  from      account_payables_tbl ap  join      vendors v on ap.vendor_id = v.vendor_id  where      ap.due_date < sysdate      and ap.amount_due > 1000000  group by      v.vendor_name  order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Take all invoices past due that are above $1,000,000.  Then total them for each vendor and sort in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate     and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Take all invoices past due that are above $1,000,000.  Then total them for each vendor and sort in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate     and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor names along with their total outstanding invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_outstanding_amount from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: view invoices with an open or unpaid balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices that have a pending payment balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices where the balance has not been fully paid      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due greater than 1m      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.invoice_date,      ap.due_date,      ap.amount_due from      account_payables_tbl ap where      ap.amount_due > 1000000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display vendor name along with total amount due for each vendor      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,     sum(ap.amount_due) as total_amount_due  from      account_payables_tbl ap  join      vendors v  on        ap.vendor_id = v.vendor_id  group by  v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due, vendor name, and invoice number      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      v.vendor_name from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices with amount due, vendor name, and invoice number      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      v.vendor_name from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total amount due to each supplier      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total amount due by supplier      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id group by      v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show supplier name and total payment amount aggregated by supplier      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select    v.vendor_name,    sum(ap.amount_due) as total_payment_amount from    account_payables_tbl ap   join vendors v on ap.vendor_id = v.vendor_id group by    v.vendor_name;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list all invoice amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.amount_due from      account_payables_tbl ap;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show unpaid invoices with due amounts      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0 fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: display invoices that have an outstanding balance      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      ap.invoice_number,      ap.amount_due,      ap.due_date,      ap.past_due_days from      account_payables_tbl ap where      ap.amount_due > 0;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total, count, and average amount of all invoices past due above $1,000,000 by vendor in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due,      count(ap.invoice_number) as count_invoices,      avg(ap.amount_due) as average_amount_due from      account_payables_tbl ap join      vendors v on ap.vendor_id = v.vendor_id where      ap.due_date < sysdate      and ap.amount_due > 1000000 group by      v.vendor_name order by      total_amount_due desc fetch first 50 rows only;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show total of all invoices past due by vendor in descending order      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"select      v.vendor_name,      sum(ap.amount_due) as total_amount_due  from      account_payables_tbl ap  join      vendors v on ap.vendor_id = v.vendor_id  where      ap.due_date < sysdate  group by      v.vendor_name  order by      total_amount_due desc;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices over 10 days due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.DUE_DATE, ap.PAST_DUE_DAYS, ap.AMOUNT_DUE FROM ACCOUNT_PAYABLES_TBL ap WHERE ap.PAST_DUE_DAYS > 10;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: list total sales from last year      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT SUM(ap.AMOUNT_DUE) AS TOTAL_SALES FROM ACCOUNT_PAYABLES_TBL ap WHERE EXTRACT(YEAR FROM ap.INVOICE_DATE) = 2023;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Payables      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, v.VENDOR_NAME, ap.AMOUNT_DUE, ap.PAST_DUE_DAYS FROM ACCOUNT_PAYABLES_TBL ap JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE ap.AMOUNT_DUE > 1000 AND ap.PAST_DUE_DAYS > 7;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Supply Chain      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, v.VENDOR_NAME, itl.INVOICE_TYPE, ap.AMOUNT_DUE, ap.PAST_DUE_DAYS FROM ACCOUNT_PAYABLES_TBL ap JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID JOIN INVOICE_TYPE_LOOKUP itl ON ap.INVOICE_TYPE_ID = itl.INVOICE_TYPE_ID WHERE ap.AMOUNT_DUE > 1000 AND ap.PAST_DUE_DAYS > 7;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show invoices due greater than 1M including vendor name      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.DUE_DATE, ap.AMOUNT_DUE, v.VENDOR_NAME FROM ACCOUNT_PAYABLES_TBL ap JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE ap.AMOUNT_DUE > 1000000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show all vendors with extreme amounts due      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (     ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT v.VENDOR_NAME, ap.AMOUNT_DUE FROM ACCOUNT_PAYABLES_TBL ap JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE ap.AMOUNT_DUE > 1000000000;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show all payables broken down by foobar      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (   ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT ap.INVOICE_NUMBER, ap.INVOICE_DATE, ap.DUE_DATE, ap.AMOUNT_DUE, v.VENDOR_NAME FROM ACCOUNT_PAYABLES_TBL ap JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE INVOICE_TYPE = 'foobar';"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: show payables for 2021 broken down by foobar for mega invoices      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (    ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"SELECT itl.INVOICE_TYPE, ap.AMOUNT_DUE, v.VENDOR_NAME FROM ACCOUNT_PAYABLES_TBL ap JOIN INVOICE_TYPE_LOOKUP itl ON ap.INVOICE_TYPE_ID = itl.INVOICE_TYPE_ID JOIN VENDORS v ON ap.VENDOR_ID = v.VENDOR_ID WHERE itl.INVOICE_TYPE = 'Megaxxxxxxxxxxxxxxx' AND EXTRACT(YEAR FROM ap.INVOICE_DATE) = 2021;"}
{"prompt":"     Using the METADATA and the INSTRUCTIONS provided, create a SQL query for the user prompt given below.     User prompt: Show invoice number, amount due and invoice date      Your query should be syntactically correct sql in Oracle dialect.      INSTRUCTIONS:        -   If what the prompt is asking for does not clearly relate to the below metadata tables or columns or to the below business rules, do not generate a SQL query.  Instead answer: 'Please clarify.'         -  Use column names from the metadata below with no exceptions.         -  Do not provide any explanations. Only output query.         -  Make the query explict and readable.  Use table aliases         -  Return a minimal number of columns that are relevant to the prompt and meaningful to the business user         -  Do not aggregate unless the prompt specifies         -  For aggregation(s) in the select clause, only group by column(s) used for the aggregation(s)         -  For dates in the where clause, use equality instead of ranges when possible and use 'extract' instead of 'to_date'         -  For dates in the where clause, specify the date as a number and do not derive from current date if possible         -  For numbers or dates in the where clause, specify ranges if possible and do not use 'between'         -  Avoid using Primary keys or Join keys in the select clause if possible         -  Do not order by unless the user prompt specifies      Business Rules:         -  critical invoice: amount due is > $1000 and days past due > 7      METADATA:     -- ACCOUNT_PAYABLES_TBL table is used for storing account payables information  create TABLE ACCOUNT_PAYABLES_TBL (  ACCOUNTS_PAYABLE_ID NUMBER(10), -- Accounts Payables id table Primary Key   VENDOR_ID NUMBER(10), -- Vendor Id Join key for looking up Vendors  INVOICE_NUMBER VARCHAR(200), -- Invoice number payable  INVOICE_DATE DATE, -- Invoice Date  GL_DATE DATE, -- General Ledger GL Date     INVOICE_TYPE_ID NUMBER, -- Join key for looking up invoice type     DUE_DATE DATE, -- Due Date  PAST_DUE_DAYS NUMBER(38), -- Past due days  AMOUNT_DUE NUMBER(38,2) -- Invoice Amount Due );  create TABLE VENDORS (    VENDOR_ID NUMBER(10), -- Unique Id for Vendor   VENDOR_NAME VARCHAR(4000), -- Vendor Name for payables  VENDOR_SITE_DETAILS VARCHAR(4000) -- Vendor Site Details );  create TABLE INVOICE_TYPE_LOOKUP (     INVOICE_TYPE_ID NUMBER, -- Unique key for invoice type lookup   INVOICE_TYPE VARCHAR(100) -- Invoice Type description );  -- ACCOUNT_PAYABLES_TBL.VENDOR_ID can be joined with VENDORS.VENDOR_ID -- ACCOUNT_PAYABLES_TBL.INVOICE_TYPE_ID can be joined with INVOICE_TYPE_LOOKUP.INVOICE_TYPE_ID      ","completion":"optional;"}
